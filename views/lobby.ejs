<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lobby</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js";
        import { getFirestore, collection, onSnapshot, doc, updateDoc, arrayUnion, getDoc } from "https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyDwzoEJ8mtStvnWbWfhKamWiFN9xcDumz4",
            authDomain: "quiz-poggioreale-adi.firebaseapp.com",
            projectId: "quiz-poggioreale-adi",
            storageBucket: "quiz-poggioreale-adi.appspot.com",
            messagingSenderId: "837178941245",
            appId: "1:837178941245:web:0f699bb7b69398f307af54"
        };

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        // Funzione per salvare il voto in Firestore
        const saveVote = async (questionId, answer, nickname) => {
            const questionRef = doc(db, 'questions', questionId);
            const questionDoc = await getDoc(questionRef);
            const votes = questionDoc.data().votes || [];

            // Verifica se l'utente ha già votato
            const userVote = votes.find(vote => vote.nickname === nickname);
            if (userVote) {
                alert("Hai già votato per questa domanda.");
                return;
            }

            await updateDoc(questionRef, {
                votes: arrayUnion({ nickname, answer })
            });
        };

        // Funzione per aggiornare le domande con barra di progresso
        const updateQuestions = (questions) => {
            const questionsList = document.getElementById('questions-list');
            questionsList.innerHTML = '';

            questions.forEach((question) => {
                const questionItem = document.createElement('li');
                questionItem.classList.add('list-group-item');

                // Titolo domanda
                const questionTitle = document.createElement('h5');
                questionTitle.textContent = question.questionText;
                questionItem.appendChild(questionTitle);

                const answersList = document.createElement('div');
                answersList.classList.add('my-3');

                // Conteggio dei voti
                const totalVotes = question.votes ? question.votes.length : 0;
                const userHasVoted = question.votes ? question.votes.some(vote => vote.nickname === '<%= nickname %>') : false;

                question.answers.forEach(answer => {
                    const answerItem = document.createElement('button');
                    answerItem.classList.add('btn', 'btn-outline-primary', 'me-2', 'mb-2');
                    answerItem.textContent = answer;
                    answerItem.disabled = userHasVoted; // Disabilita il pulsante se l'utente ha già votato
                    answerItem.onclick = async () => {
                        if (!userHasVoted) {
                            await saveVote(question.id, answer, '<%= nickname %>');
                        }
                    };

                    // Barra di progresso
                    const votesForAnswer = question.votes ? question.votes.filter(vote => vote.answer === answer).length : 0;
                    const votePercentage = totalVotes > 0 ? (votesForAnswer / totalVotes) * 100 : 0;
                    const progressBar = document.createElement('div');
                    progressBar.classList.add('progress', 'my-1');
                    progressBar.innerHTML = `<div class="progress-bar" role="progressbar" style="width: ${votePercentage}%;" aria-valuenow="${votePercentage}" aria-valuemin="0" aria-valuemax="100">${Math.round(votePercentage)}%</div>`;

                    answersList.appendChild(answerItem);
                    answersList.appendChild(progressBar);
                });

                questionItem.appendChild(answersList);
                questionsList.appendChild(questionItem);
            });
        };

        // Ascolta aggiornamenti in tempo reale
        onSnapshot(collection(db, 'questions'), (snapshot) => {
            const questions = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            updateQuestions(questions);
        });
    </script>
</head>
<body>
    <div class="container">
        <h1 class="my-4">Benvenuto, <%= nickname %>!</h1>
        <h2 class="my-4">Domande:</h2>
        <ul id="questions-list" class="list-group"></ul>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>